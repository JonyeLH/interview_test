/*
完美树：
题目描述

某天你得到了一棵n个结点的无根树，无根树的定义如下(来源百度百科) :
	离散数学中,无根树指无环连通无向图。
	一棵无根树是个二元组<V,E>，其中:1.V是非空集合，称为顶点集。2.E是V中元素构成的无序二元组的集合，称为边集。
	直观来说，若一个图中每条边都是无方向的，则称为无向图。无向图中的边均是顶点的无序对，无序对通常用圆括号表示。无根树它要求每个顶点之间都直接或间接相连，且图中没有环，即只有简单路径。
	由于树是图的子集，这一类图具有树的特征，但不具有树状的形式，没有特定的根节点，故称为无根树。
	任意选取图中某个点为根，均可将无根树转化成为有根树。

这棵权的每个结点都有正反面。现在你可以进行若干次操作，每次操作可以选择一个结点，把这个结点和他周围所有结点都进行翻转。
如果树的每个结点都是正面，那么这就是棵完美树， 现在请问你能否通过若干次操作把这颗树变成完美树

输入描述:
所有读入均为整型数
	第一行包含一个数T(1<=T<=5)表示样例数
接下来T组样例，每组样例:
	第一行包含一个数n(1<=n<=500,000)，表示树的结点数
接下来一行包含n个数w_i(0<=wi<= 1)，表示树的每个结点是正面还是反面，0为反面，1为正面
接下来n-1，每一行包含两个数u，v(1<=u，v<=n);u-v表示一条树边

输出描述:
输出T行，对于每组样例，如果能通过若干次操作把这颗树变成完美树，则输出YES，反之输出NO


示例
输入：
2
3
0 0 0
1 2
1 3
2 
0 1
1 2

输出：
YES
NO

说明：
第一个样例，对节点1进行操作，则所有节点都翻转位正面
第二个样例，无论怎么操作都无法达到目标

备注:

前30%的数据，小数据集 (n<=15）
中间30%的数据，中等数据集(n<=3000)
后40%的数据，大数据集(n<=500000)

*/